@page "/urls"
@using MudBlazor
@using ShortURL
@inject ILogger<URL> Logger
@inject UrlListService UrlListService
@using SharedModels.Models
@using System.Net.Http.Json
@inject HttpClient httpClient

<PageTitle>Display</PageTitle>

<h1>All URLs</h1>

<p>
    See below a list of all URLs submitted to the website.
</p>

<MudTable Items="@urls" Filter="new Func<URL,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">URLs</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Original URL</MudTh>
        <MudTh>Shortened URL</MudTh>
        <MudTh>Date Created</MudTh>
        <MudTh>Created By</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Original URL">@context.OriginalURL</MudTd>
        <MudTd DataLabel="Shortened URL">@context.ShortenedUrl</MudTd>
        <MudTd DataLabel="Date Created">@context.DateCreated</MudTd>
        <MudTd DataLabel="Created By">@context.CreatedBy</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<URL> urls = new List<URL>();

    protected override async Task OnInitializedAsync()
    {
        urls = await UrlListService.OnListAsync();
    }
    
    private string searchString1 = "";
    private URL selectedItem1 = new URL();
    private HashSet<URL> selectedItems = new HashSet<URL>();

    private bool FilterFunc1(URL element) => FilterFunc(element, searchString1);

    private bool FilterFunc(URL element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ShortenedUrl.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CreatedBy.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}